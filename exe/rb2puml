#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

# info record of klass
class KlassRecords
  attr_accessor :pub_methods, :priv_methods, :prot_methods,
                :vars, :uses, :parents, :mix_in_modules
  def initialize(modules, kls_name, stereotype = '')
    @modules = modules
    @kls_name = kls_name
    @stereotype = stereotype
    @mix_in_modules = []
    @pub_methods = []
    @priv_methods = []
    @prot_methods = []
    @parents = []
    @vars = []
    @uses = []
  end

  def to_puml_methods
    list = %i[pub_methods prot_methods priv_methods].map do |mode|
      send(mode).map do |method|
        head = method_head(mode)
        "  #{head}#{method}()"
      end
    end
    list.flatten
  end

  def to_puml_kls
    st = @stereotype.empty? ? @stereotype : " <<#{@stereotype}>>"
    kls_str(@kls_name) + st
  end

  def to_puml_vars
    @vars.sort.uniq.map { |var| "  #{var}" }
  end

  def to_puml_parents
    @parents.sort.uniq.map do |parent|
      "#{kls_str(@kls_name)} --|> #{kls_str(parent)}"
    end
  end

  def to_puml_uses
    @uses.sort.uniq.map { |use| "#{kls_str(@kls_name)} --- #{kls_str(use)}" }
  end

  def to_puml_mix_in
    @mix_in_modules.sort.uniq.map do |m_in|
      "#{kls_str(@kls_name)} ..> #{kls_str(m_in)} : <<include>>"
    end
  end

  private

  def kls_str(parent)
    parent =~ /::/ ? parent : [@modules, parent].flatten.join('::')
  end

  def method_head(mode)
    case mode
    when :pub_methods then '+'
    when :priv_methods then '-'
    when :prot_methods then '#'
    end
  end
end

# rubocop:disable Metrics/ClassLength
# ruby to PlantUML
class RB2Puml
  attr_reader :kls_table
  def initialize(dir, simple = false)
    @target_files = Dir.glob("#{dir}/*.rb")
    @simple = simple
    @kls_table = {}
    @modules = []
  end

  def to_puml
    [
      '@startuml',
      'left to right direction',
      'set namespaceSeparator ::',
      to_puml_class,
      '@enduml'
    ]
  end

  def parse_line
    all_lines do |line|
      next if line =~ /^\s*#.*/ # comment line

      parse_single_def(line)
      push_use(line)
      push_var(line)
    end
  end

  private

  def init_states(file_name)
    @file_name = File.basename(file_name)
    @modules = []
    @kls_name = ''
    @stereotype = ''
    @method_mode = :pub_methods
  end

  def all_lines
    @target_files.each do |file_name|
      init_states(file_name)
      File.open(file_name, 'r') do |file|
        file.each_line do |line|
          yield line
        end
      end
    end
  end

  def to_puml_class
    list = @kls_table.keys.map do |kls|
      rec = @kls_table[kls]
      body = @simple ? [] : [rec.to_puml_methods, rec.to_puml_vars]
      [
        "class #{rec.to_puml_kls} {", body, '}',
        rec.to_puml_parents, rec.to_puml_uses, rec.to_puml_mix_in
      ]
    end
    list.flatten
  end

  def parse_class_name(kls, parent_kls = '')
    @kls_name = kls
    push_parent(parent_kls) if parent_kls
  end

  # rubocop:disable Metrics/CyclomaticComplexity, Metrics/MethodLength
  def parse_single_def(line)
    case line
    when /^\s*class ([\w:]+) < ([\w:]+)/, /^\s*class ([\w:]+)/
      parse_class_name(Regexp.last_match(1), Regexp.last_match(2))
    when /^\s*module (\w+)/
      push_module(Regexp.last_match(1))
    when /\s*include (\w+)/
      push_mix_in(Regexp.last_match(1))
    when /^\s*def ([\w\?]+)/
      push_method(Regexp.last_match(1))
    when /^\s*protected\s*$/
      @method_mode = :prot_methods
    when /^\s*private\s*$/
      @method_mode = :priv_methods
    end
  end
  # rubocop:enable Metrics/CyclomaticComplexity, Metrics/MethodLength

  def push(key, value)
    unless @kls_table.key?(@kls_name)
      @kls_table[@kls_name] = KlassRecords.new(@modules, @kls_name, @stereotype)
    end
    @kls_table[@kls_name].send(key).push(value)
  end

  def push_parent(parent_name)
    push(:parents, parent_name)
  end

  def push_method(method_name)
    if @kls_name.empty? && !@modules.empty?
      @stereotype = 'module'
      @kls_name = @modules.pop
    end
    push(@method_mode, method_name)
  end

  def push_module(module_name)
    @kls_name = '' # now not used module in class
    @modules.push(module_name)
  end

  def push_var(line)
    return unless line =~ /@(\w+)/

    push(:vars, Regexp.last_match(1))
  end

  def push_mix_in(module_name)
    push(:mix_in_modules, module_name)
  end

  def use_match(line)
    case line
    when /([\w:]+)\.new/, /klass: ([\w:]+)/,
         /setup_supports\(\w+, ['\-\w]+, ([\w:]+)\)/
      Regexp.last_match(1)
    else
      false
    end
  end

  def push_use(line)
    use_kls_name = use_match(line)
    push(:uses, use_kls_name) if use_kls_name
  end
end
# rubocop:enable Metrics/ClassLength

opt = OptionParser.new
option = {}
opt.on('-d', '--dir=DIR', 'ruby source directory') do |v|
  option[:dir] = v
end
opt.on('-s', '--simple', 'simple(ignore member methods/vars') do |v|
  option[:simple] = v
end
opt.parse!(ARGV)

if option[:dir]
  rb2puml = RB2Puml.new(option[:dir], option[:simple])
  rb2puml.parse_line
  puts rb2puml.to_puml
else
  warn opt.help
  exit 1
end
