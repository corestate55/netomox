#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'thor'
require 'netomox'

module Netomox
  # network topology model checker (frontend)
  class CLI < Thor
    class_option :verbose, type: :boolean, default: false, aliases: :v

    desc 'check JSON', 'Check topology data consistency'
    def check(file)
      run_check(file)
    end

    desc 'diff [opts] JSON1 JSON2', 'Diff between topology data'
    option :all, type: :boolean, default: false, aliases: :a,
                 desc: 'Print all includes unchanged object.'
    option :color, type: :boolean, default: false, aliases: :c,
                   desc: 'Print diff with color.'
    option :output, type: :string, default: nil, aliases: :o,
                    desc: 'Output diff json data to file'
    def diff(file1, file2)
      run_diff(file1, file2)
    end

    desc 'graphdb [opts] JSON', 'Send topology data to graphdb (neo4j)'
    option :info, type: :string, default: nil, aliases: :i,
                  desc: 'Graph DB connection info file'
    option :clear, type: :boolean, default: false, aliases: :c,
                   desc: 'Clear all objects in Graph DB'
    def graphdb(file)
      run_graphdb(file)
    end

    desc 'testfunc JSON', 'Test function'
    def testfunc(file)
      networks = Topology::VerifiableNetworks.new(open_data(file))
      puts JSON.pretty_generate(networks.check_family_support_path)
    end

    private

    def open_data(file, opt_hash = {})
      JSON.parse(File.read(file), opt_hash)
    end

    def run_check(file)
      networks = Topology::VerifiableNetworks.new(open_data(file))
      results = [
        networks.check_exist_link_tp,
        networks.check_exist_supporting_network,
        networks.check_exist_supporting_node,
        networks.check_exist_supporting_tp,
        networks.check_exist_supporting_link,
        networks.check_exist_reverse_link,
        networks.check_id_uniqueness,
        networks.check_tp_ref_count,
        networks.check_facing_link,
        networks.check_family_support_path
      ]
      puts JSON.pretty_generate(results)
    end

    def open_graphdb(file)
      db_info_file = options[:info] || './db_info.json'
      db_info = open_data(db_info_file, symbolize_names: true)
      GraphDB::Networks.new(open_data(file), db_info)
    end

    # rubocop:disable Metrics/AbcSize
    def run_graphdb(file)
      g_nws = open_graphdb(file)
      if options[:verbose]
        puts '# node objects'
        puts JSON.pretty_generate(g_nws.node_objects)
        puts '# relationship objects'
        puts JSON.pretty_generate(g_nws.relationship_objects)
        exit(0)
      end
      puts '# clear all nodes'
      g_nws.exec_clear_all_objects
      return if options[:clear]

      puts '# create nodes/relationships'
      g_nws.exec_create_objects
    end
    # rubocop:enable Metrics/AbcSize

    def write_diff_file(json_str)
      File.write(options[:output], json_str)
    end

    def write_diff_stdout(json_str)
      diff_view = DiffView::Viewer.new(data: json_str, print_all: options[:all], color: options[:color])
      puts diff_view
      return unless options[:verbose]

      puts '-----------------'
      puts json_str
    end

    def run_diff(file1, file2)
      nws1 = Topology::Networks.new(open_data(file1))
      nws2 = Topology::Networks.new(open_data(file2))
      d_nws = nws1.diff(nws2)
      json_str = JSON.pretty_generate(d_nws.to_data)
      if options[:output]
        write_diff_file(json_str)
      else
        write_diff_stdout(json_str)
      end
    end
  end
end

Netomox::CLI.start(ARGV)
